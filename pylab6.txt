from datetime import datetime


def task1():
    def get_keys_with_value_true(input_dict):
        true_keys = []
        for key, value in input_dict.items():
            if value is True:
                true_keys.append(key)
        return true_keys


    my_dict = {
        "a": True,
        "b": False,
        "c": True
    }

    result = get_keys_with_value_true(my_dict)
    print(result)

def task2():
    def get_unique_elements(list):
        num_list = []
        for i in list:
            if list.count(i) <=1:
                num_list.append(i)
        return num_list

    print(get_unique_elements([1, 2, 3, 1, 2, 4]))


def task3():
    def get_date_in_format(input_date):
        date_object = datetime.strptime(input_date, '%Y.%m.%d')

        formatted_date = date_object.strftime('%d.%m.%Y')
        return formatted_date


    print(get_date_in_format('2023.10.23'))


def task4():
    def get_elements_with_no_more_than_two_occurrences(list):
        num_list = []
        for i in list:
            if not num_list.count(i):
                if list.count(i) > 1:
                    num_list.append(i)
        return num_list

    print(get_elements_with_no_more_than_two_occurrences([1, 2, 3, 1, 2, 4]))

def task5():
    def get_words_from_string(string):
        print(string.split())

    string = "This a string with a several words."
    get_words_from_string(string)


def task6():
    def get_unique_elements_with_count(list):
        unique_elem = {}
        for i in list:
            if i in unique_elem:
                unique_elem[i] += 1
            else:
                unique_elem[i] = 1
        return unique_elem
    print(get_unique_elements_with_count([1, 2, 3, 1, 2, 4, 1, 2]))


def task7():
    def get_prime_numbers(n):
        primes = []
        for num in range(2, n + 1):
            is_prime = True
            for i in range(2, int(num ** 0.5) + 1):
                if num % i == 0:
                    is_prime = False
                    break
            if is_prime:
                primes.append(num)
        return primes

    # Example usage:
    print(get_prime_numbers(100))


def task8():
    def get_prime_numbers_in_list(list):
        primes = []
        for num in list:
            is_prime = True
            for i in range(2, int(num ** 0.5) + 1):
                if num % i == 0:
                    is_prime = False
                    break
            if is_prime:
                primes.append(num)
        return primes

    print(get_prime_numbers_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 27, 36, 48, 54, 67, 71, 73, 75, 83, 89, 99]))


def task9():
    def get_difference_between_dates(date1, date2):
        date1_obj = datetime.strptime(date1, "%Y.%m.%d")
        date2_obj = datetime.strptime(date2, "%Y.%m.%d")

        date_dif = date2_obj - date1_obj

        return date_dif.days

    date_str1 = "2023.10.23"
    date_str2 = "2023.10.24"
    print(get_difference_between_dates(date_str1, date_str2))



def task10():
    def get_decimal_number_from_binary_string(binary_string):
        return int(binary_string, 2)

    binary_input = "10110011"
    print(get_decimal_number_from_binary_string(binary_input))



def task11():
    def is_expression_true(expression):
        def is_perfect_square(number):
            return int(number ** 0.5) ** 2 == number

        return all(is_perfect_square(num) for num in expression)



    print(is_expression_true([4, 25, 81]))


def task12():
    def sort_by_price(shopping_list):
        return sorted(shopping_list, key=lambda x: x['price'])

    # Example usage:
    shopping_list = [
        {"name": "Apple", "price": 100},
        {"name": "Banana", "price": 50},
        {"name": "Orange", "price": 20}
    ]

    print(sort_by_price(shopping_list))


def task13():
    def get_words_starting_with_vowel(words):
        vowels = "aeiouAEIOU"
        vowel_words = []
        for word in words:
            if word[0] in vowels:
                vowel_words.append(word)
        return vowel_words


    print(get_words_starting_with_vowel(["apple", "banana", "orange", "bear", "cat"]))


task1()
task2()
task3()
task4()
task5()
task6()
task7()
task8()
task9()
task10()
task11()
task12()
task13()

#Задача 1: Получение ключей с истинным значением
#get_keys_with_value_true(input_dict): Эта функция принимает словарь в качестве входных данных.
#true_keys = []: Создается пустой список для хранения ключей со значениями.True
#for key, value in input_dict.items(): выполняет итерацию по каждой паре "ключ-значение" в словаре.
#if value is True: Проверяет, равно ли значение .True
#true_keys.append(key): Если значение равно , ключ добавляется в список.Truetrue_keys
#return true_keys: Наконец, функция возвращает список ключей со значениями.True

#Задача 2: Получить уникальные элементы
#get_unique_elements(list): Эта функция принимает список в качестве входных данных.
#num_list = []: При этом создается пустой список для хранения уникальных элементов.
#for i in list: Выполняется итерация по каждому элементу в списке.
#if list.count(i) <= 1: Проверяет, встречается ли элемент только один раз или реже (включая ноль раз).
#num_list.append(i): Если элемент уникален, он добавляется в .num_list
#return num_list: Наконец, функция возвращает список уникальных элементов.

#Задача 3: Преобразование формата даты
#get_date_in_format(input_date): Эта функция принимает в качестве входных данных строку, представляющую дату.
#date_object = datetime.strptime(input_date, '%Y.%m.%d'): преобразует входную строку в объект datetime в указанном формате.
#formatted_date = date_object.strftime('%d.%m.%Y'): Форматирует объект datetime в требуемый формат.
#return formatted_date: Наконец, функция возвращает отформатированную строку даты.

#Задача 4: Получение элементов с двумя или менее вхождениями
#get_elements_with_no_more_than_two_occurrences(list): Эта функция принимает список в качестве входных данных.
#num_list = []: Создается пустой список для хранения элементов с двумя вхождениями или меньше.
#for i in list: Выполняется итерация по каждому элементу в списке.
#if not num_list.count(i): Проверяет, не находится ли элемент еще в .num_list
#if list.count(i) > 1: Проверяет, появляется ли элемент в исходном списке более одного раза.
#num_list.append(i): Если элемент еще не находится в списке и не появляется более двух раз, он добавляется.num_list
#return num_list: Наконец, функция возвращает список элементов с двумя вхождениями или меньше.

#Задание 5: Разбиение строки на слова
#et_words_from_string(string): Эта функция принимает строку в качестве входных данных.
#string.split(): При этом строка разбивается на список слов с помощью разделителя по умолчанию (пробела).
#print(string.split()): При этом выводится результирующий список слов.

#Задача 6: Подсчет уникальных элементов
#get_unique_elements_with_count(list): Эта функция принимает список в качестве входных данных.
#unique_elem = {}: Это создает пустой словарь для хранения количества элементов.
#for i in list: Выполняется итерация по каждому элементу в списке.
#if i in unique_elem: Проверяет, является ли элемент уже ключом в словаре.
#unique_elem[i] += 1: Если элемент существует

#Задача 7: Получить простые числа
#get_prime_numbers(n): Эта функция принимает целое число в качестве входных данных.
#primes = []: Создается пустой список для хранения простых чисел.
#for num in range(2, n + 1): Перебирает все числа от 2 до n.
#is_prime = True: Инициализирует флаг, указывающий, является ли число простым.
#for i in range(2, int(num ** 0.5) + 1): перебирает все числа от 2 до квадратного корня из текущего числа.
#if num % i == 0: Это проверяет Если текущее число равно делится на любое из чисел в .range()
#is_prime = False: Если число кратно, флаг устанавливается в .False
#break: Цикл прерывается, чтобы предотвратить дальнейшие итерации.
#if is_prime: Если число простое, оно добавляется в список.primes
#return primes: Наконец, функция возвращает список простых чисел.

#Задача 8: Получение простых чисел в списке
#get_prime_numbers_in_list(list): Эта функция принимает список в качестве входных данных.
#primes = []: Создается пустой список для хранения простых чисел.
#for num in list: Выполняется итерация по каждому числу в списке.
#is_prime = True: Инициализирует флаг, указывающий, является ли число простым.
#for i in range(2, int(num ** 0.5) + 1): перебирает все числа от 2 до квадратного корня из текущего числа.
#if num % i == 0: проверяет, делится ли текущее число на какое-либо из чисел в .range()
#is_prime = False: Если число кратно, флаг устанавливается в .False
#break: Цикл прерывается, чтобы предотвратить дальнейшие итерации.
#if is_prime: Если число простое, оно добавляется в список.primes
#return primes: Наконец, функция возвращает список простых чисел.

#Задание 9: Получить разницу между датами
#get_difference_between_dates(date1, date2): Эта функция принимает в качестве входных данных две строки, представляющие даты.
#date1_obj = datetime.strptime(date1, '%Y.%m.%d'): преобразует первую дату в объект datetime в указанном формате.
#date2_obj = datetime.strptime(date2, '%Y.%m.%d'): Преобразует вторую дату в объект datetime в указанном формате.
#date_dif = date2_obj - date1_obj: Вычисляет разницу между двумя объектами datetime.
#return date_dif.days: Наконец, функция возвращает количество дней между двумя датами.

#Задача 10: Преобразование двоичной строки в десятичное число
#get_decimal_number_from_binary_string(binary_string): Эта функция принимает в качестве входных данных строку, представляющую двоичное число.
#return int(binary_string, 2): Преобразует двоичную строку в десятичное число с использованием указанной базы.

#Задача 11: Проверить, истинно ли выражение
#is_expression_true(expression): Эта функция принимает список в качестве входных данных.
#def is_perfect_square(number): Эта функция является вспомогательной функцией, которая проверяет, является ли число совершенным квадратом.
#return all(is_perfect_square(num) for num in expression): Используется цикл для перебора списка и проверки того, является ли каждый элемент идеальным квадратом.for

#Задача 12: Сортировка списка по цене
#sort_by_price(shopping_list): Это определяет функцию с именем, которая принимает один аргумент с именем . Можно предположить, что этот список содержит словари, представляющие товары в списке покупок, каждый из которых имеет ключ «цена».sort_by_priceshopping_list
#return sorted(shopping_list, key=lambda x: x['price']): Эта строка фактически сортирует . shopping_list
#sorted(shopping_list): Эта часть вызывает встроенную функцию в .sortedshopping_list
#key=lambda x: x['price']: определяет пользовательский ключ сортировки с помощью лямбда-функции. Лямбда-функция принимает один аргумент, представляющий каждый словарь в списке. Внутри лямбда-функции он обращается к ключу "price" словаря с помощью . Это, по сути, указывает функции сравнивать значения "цены" каждого словаря при сортировке.xx['price']sorted

#Задание 13: Получение слов, начинающихся с гласных букв
#get_words_starting_with_vowel(words): Эта функция принимает список слов в качестве входных данных.
#vowels = "aeiouAEIOU": При этом создается набор гласных.
#vowel_words = []: Создается пустой список для хранения слов, начинающихся с гласных.
#for word in words: Выполняется итерация по каждому слову в списке.
#if word[0] in vowels: Проверяет, является ли первая буква слова гласной.
#vowel_words.append(word): Если первая буква является гласной, слово добавляется в список.vowel_words
#return vowel_words: Наконец, функция возвращает список слов, начинающихся с гласных. 
